Terminals unused in grammar

    TYPEDEF


Rules useless in parser due to conflicts

   16 unary_operator: '+'
   17               | '-'


State 29 conflicts: 10 shift/reduce
State 30 conflicts: 10 shift/reduce
State 141 conflicts: 1 shift/reduce


Grammar

    0 $accept: translation_unit $end

    1 primary_expression: IDENTIFIER
    2                   | STRING_LIT
    3                   | I_CONSTANT
    4                   | C_CONSTANT
    5                   | '(' expression ')'

    6 postfix_expression: primary_expression
    7                   | postfix_expression '[' expression ']'
    8                   | postfix_expression '(' argument_expression_list_opt ')'
    9                   | postfix_expression PTR_OP IDENTIFIER

   10 argument_expression_list_opt: ε
   11                             | argument_expression_list

   12 argument_expression_list: assignment_expression
   13                         | argument_expression_list ',' assignment_expression

   14 unary_operator: '&'
   15               | '*'
   16               | '+'
   17               | '-'
   18               | '!'

   19 unary_expression: postfix_expression
   20                 | '+' unary_expression
   21                 | '-' unary_expression
   22                 | unary_operator unary_expression

   23 multiplicative_expression: unary_expression
   24                          | multiplicative_expression '*' unary_expression
   25                          | multiplicative_expression '/' unary_expression
   26                          | multiplicative_expression '%' unary_expression

   27 additive_expression: multiplicative_expression
   28                    | additive_expression '+' multiplicative_expression
   29                    | additive_expression '-' multiplicative_expression

   30 relational_expression: additive_expression '<' additive_expression
   31                      | additive_expression '>' additive_expression
   32                      | additive_expression LE_OP additive_expression
   33                      | additive_expression GE_OP additive_expression

   34 equality_expression: relational_expression
   35                    | equality_expression EQ_OP relational_expression
   36                    | equality_expression NE_OP relational_expression

   37 logical_AND_expression: equality_expression
   38                       | logical_AND_expression AND_OP equality_expression

   39 logical_OR_expression: logical_AND_expression
   40                      | logical_OR_expression OR_OP logical_AND_expression

   41 conditional_expression: logical_OR_expression
   42                       | logical_OR_expression '?' expression ':' conditional_expression

   43 assignment_expression: conditional_expression
   44                      | unary_expression '=' assignment_expression

   45 expression: assignment_expression

   46 declaration: type_specifier init_declarator ';'

   47 init_declarator: declarator
   48                | declarator '=' initializer

   49 type_specifier: VOID
   50               | CHAR
   51               | INT

   52 declarator: pointer_opt direct_declarator

   53 direct_declarator: IDENTIFIER
   54                  | IDENTIFIER '[' I_CONSTANT ']'
   55                  | IDENTIFIER '(' parameter_list_opt ')'

   56 pointer: '*'

   57 pointer_opt: ε
   58            | pointer

   59 parameter_list: parameter_declaration
   60               | parameter_list ',' parameter_declaration

   61 parameter_list_opt: ε
   62                   | parameter_list

   63 parameter_declaration: type_specifier pointer_opt identifier_opt

   64 identifier_opt: ε
   65               | IDENTIFIER

   66 initializer: assignment_expression

   67 statement: compound_statement
   68          | expression_statement
   69          | selection_statement
   70          | iteration_statement
   71          | jump_statement

   72 compound_statement: '{' block_item_list_opt '}'

   73 block_item_list_opt: ε
   74                    | block_item_list

   75 block_item_list: block_item
   76                | block_item_list block_item

   77 block_item: declaration
   78           | statement

   79 expression_statement: expressionopt ';'

   80 selection_statement: IF '(' expression ')' statement
   81                    | IF '(' expression ')' statement ELSE statement

   82 expressionopt: ε
   83              | expression

   84 iteration_statement: FOR '(' expressionopt ';' expressionopt ';' expressionopt ')' statement

   85 jump_statement: RETURN expressionopt ';'

   86 translation_unit: function_definition
   87                 | declaration

   88 function_definition: type_specifier declarator declaration_list_opt compound_statement

   89 declaration_list: declaration
   90                 | declaration_list declaration

   91 declaration_list_opt: ε
   92                     | declaration_list


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 18
    '%' (37) 26
    '&' (38) 14
    '(' (40) 5 8 55 80 81 84
    ')' (41) 5 8 55 80 81 84
    '*' (42) 15 24 56
    '+' (43) 16 20 28
    ',' (44) 13 60
    '-' (45) 17 21 29
    '/' (47) 25
    ':' (58) 42
    ';' (59) 46 79 84 85
    '<' (60) 30
    '=' (61) 44 48
    '>' (62) 31
    '?' (63) 42
    '[' (91) 7 54
    ']' (93) 7 54
    '{' (123) 72
    '}' (125) 72
    error (256)
    CHAR (258) 50
    ELSE (259) 81
    FOR (260) 84
    IF (261) 80 81
    INT (262) 51
    RETURN (263) 85
    VOID (264) 49
    TYPEDEF (265)
    IDENTIFIER <symp> (266) 1 9 53 54 55 65
    STRING_LIT (267) 2
    C_CONSTANT (268) 4
    I_CONSTANT <symp> (269) 3 54
    AND_OP (270) 38
    PTR_OP (271) 9
    OR_OP (272) 40
    LE_OP (273) 32
    GE_OP (274) 33
    EQ_OP (275) 35
    NE_OP (276) 36


Nonterminals, with rules where they appear

    $accept (42)
        on left: 0
    primary_expression <symp> (43)
        on left: 1 2 3 4 5
        on right: 6
    postfix_expression <symp> (44)
        on left: 6 7 8 9
        on right: 7 8 9 19
    argument_expression_list_opt (45)
        on left: 10 11
        on right: 8
    argument_expression_list (46)
        on left: 12 13
        on right: 11 13
    unary_operator (47)
        on left: 14 15 16 17 18
        on right: 22
    unary_expression <symp> (48)
        on left: 19 20 21 22
        on right: 20 21 22 23 24 25 26 44
    multiplicative_expression <symp> (49)
        on left: 23 24 25 26
        on right: 24 25 26 27 28 29
    additive_expression <symp> (50)
        on left: 27 28 29
        on right: 28 29 30 31 32 33
    relational_expression <buly> (51)
        on left: 30 31 32 33
        on right: 34 35 36
    equality_expression (52)
        on left: 34 35 36
        on right: 35 36 37 38
    logical_AND_expression (53)
        on left: 37 38
        on right: 38 39 40
    logical_OR_expression (54)
        on left: 39 40
        on right: 40 41 42
    conditional_expression (55)
        on left: 41 42
        on right: 42 43
    assignment_expression (56)
        on left: 43 44
        on right: 12 13 44 45 66
    expression (57)
        on left: 45
        on right: 5 7 42 80 81 83
    declaration (58)
        on left: 46
        on right: 77 87 89 90
    init_declarator (59)
        on left: 47 48
        on right: 46
    type_specifier (60)
        on left: 49 50 51
        on right: 46 63 88
    declarator (61)
        on left: 52
        on right: 47 48 88
    direct_declarator (62)
        on left: 53 54 55
        on right: 52
    pointer (63)
        on left: 56
        on right: 58
    pointer_opt (64)
        on left: 57 58
        on right: 52 63
    parameter_list (65)
        on left: 59 60
        on right: 60 62
    parameter_list_opt (66)
        on left: 61 62
        on right: 55
    parameter_declaration (67)
        on left: 63
        on right: 59 60
    identifier_opt (68)
        on left: 64 65
        on right: 63
    initializer (69)
        on left: 66
        on right: 48
    statement (70)
        on left: 67 68 69 70 71
        on right: 78 80 81 84
    compound_statement (71)
        on left: 72
        on right: 67 88
    block_item_list_opt (72)
        on left: 73 74
        on right: 72
    block_item_list (73)
        on left: 75 76
        on right: 74 76
    block_item (74)
        on left: 77 78
        on right: 75 76
    expression_statement (75)
        on left: 79
        on right: 68
    selection_statement (76)
        on left: 80 81
        on right: 69
    expressionopt (77)
        on left: 82 83
        on right: 79 84 85
    iteration_statement (78)
        on left: 84
        on right: 70
    jump_statement (79)
        on left: 85
        on right: 71
    translation_unit (80)
        on left: 86 87
        on right: 0
    function_definition (81)
        on left: 88
        on right: 86
    declaration_list (82)
        on left: 89 90
        on right: 90 92
    declaration_list_opt (83)
        on left: 91 92
        on right: 88


State 0

    0 $accept: • translation_unit $end

    CHAR  shift, and go to state 1
    INT   shift, and go to state 2
    VOID  shift, and go to state 3

    declaration          go to state 4
    type_specifier       go to state 5
    translation_unit     go to state 6
    function_definition  go to state 7


State 1

   50 type_specifier: CHAR •

    $default  reduce using rule 50 (type_specifier)


State 2

   51 type_specifier: INT •

    $default  reduce using rule 51 (type_specifier)


State 3

   49 type_specifier: VOID •

    $default  reduce using rule 49 (type_specifier)


State 4

   87 translation_unit: declaration •

    $default  reduce using rule 87 (translation_unit)


State 5

   46 declaration: type_specifier • init_declarator ';'
   88 function_definition: type_specifier • declarator declaration_list_opt compound_statement

    '*'  shift, and go to state 8

    $default  reduce using rule 57 (pointer_opt)

    init_declarator  go to state 9
    declarator       go to state 10
    pointer          go to state 11
    pointer_opt      go to state 12


State 6

    0 $accept: translation_unit • $end

    $end  shift, and go to state 13


State 7

   86 translation_unit: function_definition •

    $default  reduce using rule 86 (translation_unit)


State 8

   56 pointer: '*' •

    $default  reduce using rule 56 (pointer)


State 9

   46 declaration: type_specifier init_declarator • ';'

    ';'  shift, and go to state 14


State 10

   47 init_declarator: declarator •
   48                | declarator • '=' initializer
   88 function_definition: type_specifier declarator • declaration_list_opt compound_statement

    CHAR  shift, and go to state 1
    INT   shift, and go to state 2
    VOID  shift, and go to state 3
    '='   shift, and go to state 15

    '{'       reduce using rule 91 (declaration_list_opt)
    $default  reduce using rule 47 (init_declarator)

    declaration           go to state 16
    type_specifier        go to state 17
    declaration_list      go to state 18
    declaration_list_opt  go to state 19


State 11

   58 pointer_opt: pointer •

    $default  reduce using rule 58 (pointer_opt)


State 12

   52 declarator: pointer_opt • direct_declarator

    IDENTIFIER  shift, and go to state 20

    direct_declarator  go to state 21


State 13

    0 $accept: translation_unit $end •

    $default  accept


State 14

   46 declaration: type_specifier init_declarator ';' •

    $default  reduce using rule 46 (declaration)


State 15

   48 init_declarator: declarator '=' • initializer

    IDENTIFIER  shift, and go to state 22
    STRING_LIT  shift, and go to state 23
    C_CONSTANT  shift, and go to state 24
    I_CONSTANT  shift, and go to state 25
    '('         shift, and go to state 26
    '&'         shift, and go to state 27
    '*'         shift, and go to state 28
    '+'         shift, and go to state 29
    '-'         shift, and go to state 30
    '!'         shift, and go to state 31

    primary_expression         go to state 32
    postfix_expression         go to state 33
    unary_operator             go to state 34
    unary_expression           go to state 35
    multiplicative_expression  go to state 36
    additive_expression        go to state 37
    relational_expression      go to state 38
    equality_expression        go to state 39
    logical_AND_expression     go to state 40
    logical_OR_expression      go to state 41
    conditional_expression     go to state 42
    assignment_expression      go to state 43
    initializer                go to state 44


State 16

   89 declaration_list: declaration •

    $default  reduce using rule 89 (declaration_list)


State 17

   46 declaration: type_specifier • init_declarator ';'

    '*'  shift, and go to state 8

    $default  reduce using rule 57 (pointer_opt)

    init_declarator  go to state 9
    declarator       go to state 45
    pointer          go to state 11
    pointer_opt      go to state 12


State 18

   90 declaration_list: declaration_list • declaration
   92 declaration_list_opt: declaration_list •

    CHAR  shift, and go to state 1
    INT   shift, and go to state 2
    VOID  shift, and go to state 3

    $default  reduce using rule 92 (declaration_list_opt)

    declaration     go to state 46
    type_specifier  go to state 17


State 19

   88 function_definition: type_specifier declarator declaration_list_opt • compound_statement

    '{'  shift, and go to state 47

    compound_statement  go to state 48


State 20

   53 direct_declarator: IDENTIFIER •
   54                  | IDENTIFIER • '[' I_CONSTANT ']'
   55                  | IDENTIFIER • '(' parameter_list_opt ')'

    '('  shift, and go to state 49
    '['  shift, and go to state 50

    $default  reduce using rule 53 (direct_declarator)


State 21

   52 declarator: pointer_opt direct_declarator •

    $default  reduce using rule 52 (declarator)


State 22

    1 primary_expression: IDENTIFIER •

    $default  reduce using rule 1 (primary_expression)


State 23

    2 primary_expression: STRING_LIT •

    $default  reduce using rule 2 (primary_expression)


State 24

    4 primary_expression: C_CONSTANT •

    $default  reduce using rule 4 (primary_expression)


State 25

    3 primary_expression: I_CONSTANT •

    $default  reduce using rule 3 (primary_expression)


State 26

    5 primary_expression: '(' • expression ')'

    IDENTIFIER  shift, and go to state 22
    STRING_LIT  shift, and go to state 23
    C_CONSTANT  shift, and go to state 24
    I_CONSTANT  shift, and go to state 25
    '('         shift, and go to state 26
    '&'         shift, and go to state 27
    '*'         shift, and go to state 28
    '+'         shift, and go to state 29
    '-'         shift, and go to state 30
    '!'         shift, and go to state 31

    primary_expression         go to state 32
    postfix_expression         go to state 33
    unary_operator             go to state 34
    unary_expression           go to state 35
    multiplicative_expression  go to state 36
    additive_expression        go to state 37
    relational_expression      go to state 38
    equality_expression        go to state 39
    logical_AND_expression     go to state 40
    logical_OR_expression      go to state 41
    conditional_expression     go to state 42
    assignment_expression      go to state 51
    expression                 go to state 52


State 27

   14 unary_operator: '&' •

    $default  reduce using rule 14 (unary_operator)


State 28

   15 unary_operator: '*' •

    $default  reduce using rule 15 (unary_operator)


State 29

   16 unary_operator: '+' •
   20 unary_expression: '+' • unary_expression

    IDENTIFIER  shift, and go to state 22
    STRING_LIT  shift, and go to state 23
    C_CONSTANT  shift, and go to state 24
    I_CONSTANT  shift, and go to state 25
    '('         shift, and go to state 26
    '&'         shift, and go to state 27
    '*'         shift, and go to state 28
    '+'         shift, and go to state 29
    '-'         shift, and go to state 30
    '!'         shift, and go to state 31

    IDENTIFIER  [reduce using rule 16 (unary_operator)]
    STRING_LIT  [reduce using rule 16 (unary_operator)]
    C_CONSTANT  [reduce using rule 16 (unary_operator)]
    I_CONSTANT  [reduce using rule 16 (unary_operator)]
    '('         [reduce using rule 16 (unary_operator)]
    '&'         [reduce using rule 16 (unary_operator)]
    '*'         [reduce using rule 16 (unary_operator)]
    '+'         [reduce using rule 16 (unary_operator)]
    '-'         [reduce using rule 16 (unary_operator)]
    '!'         [reduce using rule 16 (unary_operator)]

    primary_expression  go to state 32
    postfix_expression  go to state 33
    unary_operator      go to state 34
    unary_expression    go to state 53


State 30

   17 unary_operator: '-' •
   21 unary_expression: '-' • unary_expression

    IDENTIFIER  shift, and go to state 22
    STRING_LIT  shift, and go to state 23
    C_CONSTANT  shift, and go to state 24
    I_CONSTANT  shift, and go to state 25
    '('         shift, and go to state 26
    '&'         shift, and go to state 27
    '*'         shift, and go to state 28
    '+'         shift, and go to state 29
    '-'         shift, and go to state 30
    '!'         shift, and go to state 31

    IDENTIFIER  [reduce using rule 17 (unary_operator)]
    STRING_LIT  [reduce using rule 17 (unary_operator)]
    C_CONSTANT  [reduce using rule 17 (unary_operator)]
    I_CONSTANT  [reduce using rule 17 (unary_operator)]
    '('         [reduce using rule 17 (unary_operator)]
    '&'         [reduce using rule 17 (unary_operator)]
    '*'         [reduce using rule 17 (unary_operator)]
    '+'         [reduce using rule 17 (unary_operator)]
    '-'         [reduce using rule 17 (unary_operator)]
    '!'         [reduce using rule 17 (unary_operator)]

    primary_expression  go to state 32
    postfix_expression  go to state 33
    unary_operator      go to state 34
    unary_expression    go to state 54


State 31

   18 unary_operator: '!' •

    $default  reduce using rule 18 (unary_operator)


State 32

    6 postfix_expression: primary_expression •

    $default  reduce using rule 6 (postfix_expression)


State 33

    7 postfix_expression: postfix_expression • '[' expression ']'
    8                   | postfix_expression • '(' argument_expression_list_opt ')'
    9                   | postfix_expression • PTR_OP IDENTIFIER
   19 unary_expression: postfix_expression •

    PTR_OP  shift, and go to state 55
    '('     shift, and go to state 56
    '['     shift, and go to state 57

    $default  reduce using rule 19 (unary_expression)


State 34

   22 unary_expression: unary_operator • unary_expression

    IDENTIFIER  shift, and go to state 22
    STRING_LIT  shift, and go to state 23
    C_CONSTANT  shift, and go to state 24
    I_CONSTANT  shift, and go to state 25
    '('         shift, and go to state 26
    '&'         shift, and go to state 27
    '*'         shift, and go to state 28
    '+'         shift, and go to state 29
    '-'         shift, and go to state 30
    '!'         shift, and go to state 31

    primary_expression  go to state 32
    postfix_expression  go to state 33
    unary_operator      go to state 34
    unary_expression    go to state 58


State 35

   23 multiplicative_expression: unary_expression •
   44 assignment_expression: unary_expression • '=' assignment_expression

    '='  shift, and go to state 59

    $default  reduce using rule 23 (multiplicative_expression)


State 36

   24 multiplicative_expression: multiplicative_expression • '*' unary_expression
   25                          | multiplicative_expression • '/' unary_expression
   26                          | multiplicative_expression • '%' unary_expression
   27 additive_expression: multiplicative_expression •

    '*'  shift, and go to state 60
    '/'  shift, and go to state 61
    '%'  shift, and go to state 62

    $default  reduce using rule 27 (additive_expression)


State 37

   28 additive_expression: additive_expression • '+' multiplicative_expression
   29                    | additive_expression • '-' multiplicative_expression
   30 relational_expression: additive_expression • '<' additive_expression
   31                      | additive_expression • '>' additive_expression
   32                      | additive_expression • LE_OP additive_expression
   33                      | additive_expression • GE_OP additive_expression

    LE_OP  shift, and go to state 63
    GE_OP  shift, and go to state 64
    '+'    shift, and go to state 65
    '-'    shift, and go to state 66
    '<'    shift, and go to state 67
    '>'    shift, and go to state 68


State 38

   34 equality_expression: relational_expression •

    $default  reduce using rule 34 (equality_expression)


State 39

   35 equality_expression: equality_expression • EQ_OP relational_expression
   36                    | equality_expression • NE_OP relational_expression
   37 logical_AND_expression: equality_expression •

    EQ_OP  shift, and go to state 69
    NE_OP  shift, and go to state 70

    $default  reduce using rule 37 (logical_AND_expression)


State 40

   38 logical_AND_expression: logical_AND_expression • AND_OP equality_expression
   39 logical_OR_expression: logical_AND_expression •

    AND_OP  shift, and go to state 71

    $default  reduce using rule 39 (logical_OR_expression)


State 41

   40 logical_OR_expression: logical_OR_expression • OR_OP logical_AND_expression
   41 conditional_expression: logical_OR_expression •
   42                       | logical_OR_expression • '?' expression ':' conditional_expression

    OR_OP  shift, and go to state 72
    '?'    shift, and go to state 73

    $default  reduce using rule 41 (conditional_expression)


State 42

   43 assignment_expression: conditional_expression •

    $default  reduce using rule 43 (assignment_expression)


State 43

   66 initializer: assignment_expression •

    $default  reduce using rule 66 (initializer)


State 44

   48 init_declarator: declarator '=' initializer •

    $default  reduce using rule 48 (init_declarator)


State 45

   47 init_declarator: declarator •
   48                | declarator • '=' initializer

    '='  shift, and go to state 15

    $default  reduce using rule 47 (init_declarator)


State 46

   90 declaration_list: declaration_list declaration •

    $default  reduce using rule 90 (declaration_list)


State 47

   72 compound_statement: '{' • block_item_list_opt '}'

    CHAR        shift, and go to state 1
    FOR         shift, and go to state 74
    IF          shift, and go to state 75
    INT         shift, and go to state 2
    RETURN      shift, and go to state 76
    VOID        shift, and go to state 3
    IDENTIFIER  shift, and go to state 22
    STRING_LIT  shift, and go to state 23
    C_CONSTANT  shift, and go to state 24
    I_CONSTANT  shift, and go to state 25
    '('         shift, and go to state 26
    '&'         shift, and go to state 27
    '*'         shift, and go to state 28
    '+'         shift, and go to state 29
    '-'         shift, and go to state 30
    '!'         shift, and go to state 31
    '{'         shift, and go to state 47

    ';'       reduce using rule 82 (expressionopt)
    $default  reduce using rule 73 (block_item_list_opt)

    primary_expression         go to state 32
    postfix_expression         go to state 33
    unary_operator             go to state 34
    unary_expression           go to state 35
    multiplicative_expression  go to state 36
    additive_expression        go to state 37
    relational_expression      go to state 38
    equality_expression        go to state 39
    logical_AND_expression     go to state 40
    logical_OR_expression      go to state 41
    conditional_expression     go to state 42
    assignment_expression      go to state 51
    expression                 go to state 77
    declaration                go to state 78
    type_specifier             go to state 17
    statement                  go to state 79
    compound_statement         go to state 80
    block_item_list_opt        go to state 81
    block_item_list            go to state 82
    block_item                 go to state 83
    expression_statement       go to state 84
    selection_statement        go to state 85
    expressionopt              go to state 86
    iteration_statement        go to state 87
    jump_statement             go to state 88


State 48

   88 function_definition: type_specifier declarator declaration_list_opt compound_statement •

    $default  reduce using rule 88 (function_definition)


State 49

   55 direct_declarator: IDENTIFIER '(' • parameter_list_opt ')'

    CHAR  shift, and go to state 1
    INT   shift, and go to state 2
    VOID  shift, and go to state 3

    $default  reduce using rule 61 (parameter_list_opt)

    type_specifier         go to state 89
    parameter_list         go to state 90
    parameter_list_opt     go to state 91
    parameter_declaration  go to state 92


State 50

   54 direct_declarator: IDENTIFIER '[' • I_CONSTANT ']'

    I_CONSTANT  shift, and go to state 93


State 51

   45 expression: assignment_expression •

    $default  reduce using rule 45 (expression)


State 52

    5 primary_expression: '(' expression • ')'

    ')'  shift, and go to state 94


State 53

   20 unary_expression: '+' unary_expression •

    $default  reduce using rule 20 (unary_expression)


State 54

   21 unary_expression: '-' unary_expression •

    $default  reduce using rule 21 (unary_expression)


State 55

    9 postfix_expression: postfix_expression PTR_OP • IDENTIFIER

    IDENTIFIER  shift, and go to state 95


State 56

    8 postfix_expression: postfix_expression '(' • argument_expression_list_opt ')'

    IDENTIFIER  shift, and go to state 22
    STRING_LIT  shift, and go to state 23
    C_CONSTANT  shift, and go to state 24
    I_CONSTANT  shift, and go to state 25
    '('         shift, and go to state 26
    '&'         shift, and go to state 27
    '*'         shift, and go to state 28
    '+'         shift, and go to state 29
    '-'         shift, and go to state 30
    '!'         shift, and go to state 31

    $default  reduce using rule 10 (argument_expression_list_opt)

    primary_expression            go to state 32
    postfix_expression            go to state 33
    argument_expression_list_opt  go to state 96
    argument_expression_list      go to state 97
    unary_operator                go to state 34
    unary_expression              go to state 35
    multiplicative_expression     go to state 36
    additive_expression           go to state 37
    relational_expression         go to state 38
    equality_expression           go to state 39
    logical_AND_expression        go to state 40
    logical_OR_expression         go to state 41
    conditional_expression        go to state 42
    assignment_expression         go to state 98


State 57

    7 postfix_expression: postfix_expression '[' • expression ']'

    IDENTIFIER  shift, and go to state 22
    STRING_LIT  shift, and go to state 23
    C_CONSTANT  shift, and go to state 24
    I_CONSTANT  shift, and go to state 25
    '('         shift, and go to state 26
    '&'         shift, and go to state 27
    '*'         shift, and go to state 28
    '+'         shift, and go to state 29
    '-'         shift, and go to state 30
    '!'         shift, and go to state 31

    primary_expression         go to state 32
    postfix_expression         go to state 33
    unary_operator             go to state 34
    unary_expression           go to state 35
    multiplicative_expression  go to state 36
    additive_expression        go to state 37
    relational_expression      go to state 38
    equality_expression        go to state 39
    logical_AND_expression     go to state 40
    logical_OR_expression      go to state 41
    conditional_expression     go to state 42
    assignment_expression      go to state 51
    expression                 go to state 99


State 58

   22 unary_expression: unary_operator unary_expression •

    $default  reduce using rule 22 (unary_expression)


State 59

   44 assignment_expression: unary_expression '=' • assignment_expression

    IDENTIFIER  shift, and go to state 22
    STRING_LIT  shift, and go to state 23
    C_CONSTANT  shift, and go to state 24
    I_CONSTANT  shift, and go to state 25
    '('         shift, and go to state 26
    '&'         shift, and go to state 27
    '*'         shift, and go to state 28
    '+'         shift, and go to state 29
    '-'         shift, and go to state 30
    '!'         shift, and go to state 31

    primary_expression         go to state 32
    postfix_expression         go to state 33
    unary_operator             go to state 34
    unary_expression           go to state 35
    multiplicative_expression  go to state 36
    additive_expression        go to state 37
    relational_expression      go to state 38
    equality_expression        go to state 39
    logical_AND_expression     go to state 40
    logical_OR_expression      go to state 41
    conditional_expression     go to state 42
    assignment_expression      go to state 100


State 60

   24 multiplicative_expression: multiplicative_expression '*' • unary_expression

    IDENTIFIER  shift, and go to state 22
    STRING_LIT  shift, and go to state 23
    C_CONSTANT  shift, and go to state 24
    I_CONSTANT  shift, and go to state 25
    '('         shift, and go to state 26
    '&'         shift, and go to state 27
    '*'         shift, and go to state 28
    '+'         shift, and go to state 29
    '-'         shift, and go to state 30
    '!'         shift, and go to state 31

    primary_expression  go to state 32
    postfix_expression  go to state 33
    unary_operator      go to state 34
    unary_expression    go to state 101


State 61

   25 multiplicative_expression: multiplicative_expression '/' • unary_expression

    IDENTIFIER  shift, and go to state 22
    STRING_LIT  shift, and go to state 23
    C_CONSTANT  shift, and go to state 24
    I_CONSTANT  shift, and go to state 25
    '('         shift, and go to state 26
    '&'         shift, and go to state 27
    '*'         shift, and go to state 28
    '+'         shift, and go to state 29
    '-'         shift, and go to state 30
    '!'         shift, and go to state 31

    primary_expression  go to state 32
    postfix_expression  go to state 33
    unary_operator      go to state 34
    unary_expression    go to state 102


State 62

   26 multiplicative_expression: multiplicative_expression '%' • unary_expression

    IDENTIFIER  shift, and go to state 22
    STRING_LIT  shift, and go to state 23
    C_CONSTANT  shift, and go to state 24
    I_CONSTANT  shift, and go to state 25
    '('         shift, and go to state 26
    '&'         shift, and go to state 27
    '*'         shift, and go to state 28
    '+'         shift, and go to state 29
    '-'         shift, and go to state 30
    '!'         shift, and go to state 31

    primary_expression  go to state 32
    postfix_expression  go to state 33
    unary_operator      go to state 34
    unary_expression    go to state 103


State 63

   32 relational_expression: additive_expression LE_OP • additive_expression

    IDENTIFIER  shift, and go to state 22
    STRING_LIT  shift, and go to state 23
    C_CONSTANT  shift, and go to state 24
    I_CONSTANT  shift, and go to state 25
    '('         shift, and go to state 26
    '&'         shift, and go to state 27
    '*'         shift, and go to state 28
    '+'         shift, and go to state 29
    '-'         shift, and go to state 30
    '!'         shift, and go to state 31

    primary_expression         go to state 32
    postfix_expression         go to state 33
    unary_operator             go to state 34
    unary_expression           go to state 104
    multiplicative_expression  go to state 36
    additive_expression        go to state 105


State 64

   33 relational_expression: additive_expression GE_OP • additive_expression

    IDENTIFIER  shift, and go to state 22
    STRING_LIT  shift, and go to state 23
    C_CONSTANT  shift, and go to state 24
    I_CONSTANT  shift, and go to state 25
    '('         shift, and go to state 26
    '&'         shift, and go to state 27
    '*'         shift, and go to state 28
    '+'         shift, and go to state 29
    '-'         shift, and go to state 30
    '!'         shift, and go to state 31

    primary_expression         go to state 32
    postfix_expression         go to state 33
    unary_operator             go to state 34
    unary_expression           go to state 104
    multiplicative_expression  go to state 36
    additive_expression        go to state 106


State 65

   28 additive_expression: additive_expression '+' • multiplicative_expression

    IDENTIFIER  shift, and go to state 22
    STRING_LIT  shift, and go to state 23
    C_CONSTANT  shift, and go to state 24
    I_CONSTANT  shift, and go to state 25
    '('         shift, and go to state 26
    '&'         shift, and go to state 27
    '*'         shift, and go to state 28
    '+'         shift, and go to state 29
    '-'         shift, and go to state 30
    '!'         shift, and go to state 31

    primary_expression         go to state 32
    postfix_expression         go to state 33
    unary_operator             go to state 34
    unary_expression           go to state 104
    multiplicative_expression  go to state 107


State 66

   29 additive_expression: additive_expression '-' • multiplicative_expression

    IDENTIFIER  shift, and go to state 22
    STRING_LIT  shift, and go to state 23
    C_CONSTANT  shift, and go to state 24
    I_CONSTANT  shift, and go to state 25
    '('         shift, and go to state 26
    '&'         shift, and go to state 27
    '*'         shift, and go to state 28
    '+'         shift, and go to state 29
    '-'         shift, and go to state 30
    '!'         shift, and go to state 31

    primary_expression         go to state 32
    postfix_expression         go to state 33
    unary_operator             go to state 34
    unary_expression           go to state 104
    multiplicative_expression  go to state 108


State 67

   30 relational_expression: additive_expression '<' • additive_expression

    IDENTIFIER  shift, and go to state 22
    STRING_LIT  shift, and go to state 23
    C_CONSTANT  shift, and go to state 24
    I_CONSTANT  shift, and go to state 25
    '('         shift, and go to state 26
    '&'         shift, and go to state 27
    '*'         shift, and go to state 28
    '+'         shift, and go to state 29
    '-'         shift, and go to state 30
    '!'         shift, and go to state 31

    primary_expression         go to state 32
    postfix_expression         go to state 33
    unary_operator             go to state 34
    unary_expression           go to state 104
    multiplicative_expression  go to state 36
    additive_expression        go to state 109


State 68

   31 relational_expression: additive_expression '>' • additive_expression

    IDENTIFIER  shift, and go to state 22
    STRING_LIT  shift, and go to state 23
    C_CONSTANT  shift, and go to state 24
    I_CONSTANT  shift, and go to state 25
    '('         shift, and go to state 26
    '&'         shift, and go to state 27
    '*'         shift, and go to state 28
    '+'         shift, and go to state 29
    '-'         shift, and go to state 30
    '!'         shift, and go to state 31

    primary_expression         go to state 32
    postfix_expression         go to state 33
    unary_operator             go to state 34
    unary_expression           go to state 104
    multiplicative_expression  go to state 36
    additive_expression        go to state 110


State 69

   35 equality_expression: equality_expression EQ_OP • relational_expression

    IDENTIFIER  shift, and go to state 22
    STRING_LIT  shift, and go to state 23
    C_CONSTANT  shift, and go to state 24
    I_CONSTANT  shift, and go to state 25
    '('         shift, and go to state 26
    '&'         shift, and go to state 27
    '*'         shift, and go to state 28
    '+'         shift, and go to state 29
    '-'         shift, and go to state 30
    '!'         shift, and go to state 31

    primary_expression         go to state 32
    postfix_expression         go to state 33
    unary_operator             go to state 34
    unary_expression           go to state 104
    multiplicative_expression  go to state 36
    additive_expression        go to state 37
    relational_expression      go to state 111


State 70

   36 equality_expression: equality_expression NE_OP • relational_expression

    IDENTIFIER  shift, and go to state 22
    STRING_LIT  shift, and go to state 23
    C_CONSTANT  shift, and go to state 24
    I_CONSTANT  shift, and go to state 25
    '('         shift, and go to state 26
    '&'         shift, and go to state 27
    '*'         shift, and go to state 28
    '+'         shift, and go to state 29
    '-'         shift, and go to state 30
    '!'         shift, and go to state 31

    primary_expression         go to state 32
    postfix_expression         go to state 33
    unary_operator             go to state 34
    unary_expression           go to state 104
    multiplicative_expression  go to state 36
    additive_expression        go to state 37
    relational_expression      go to state 112


State 71

   38 logical_AND_expression: logical_AND_expression AND_OP • equality_expression

    IDENTIFIER  shift, and go to state 22
    STRING_LIT  shift, and go to state 23
    C_CONSTANT  shift, and go to state 24
    I_CONSTANT  shift, and go to state 25
    '('         shift, and go to state 26
    '&'         shift, and go to state 27
    '*'         shift, and go to state 28
    '+'         shift, and go to state 29
    '-'         shift, and go to state 30
    '!'         shift, and go to state 31

    primary_expression         go to state 32
    postfix_expression         go to state 33
    unary_operator             go to state 34
    unary_expression           go to state 104
    multiplicative_expression  go to state 36
    additive_expression        go to state 37
    relational_expression      go to state 38
    equality_expression        go to state 113


State 72

   40 logical_OR_expression: logical_OR_expression OR_OP • logical_AND_expression

    IDENTIFIER  shift, and go to state 22
    STRING_LIT  shift, and go to state 23
    C_CONSTANT  shift, and go to state 24
    I_CONSTANT  shift, and go to state 25
    '('         shift, and go to state 26
    '&'         shift, and go to state 27
    '*'         shift, and go to state 28
    '+'         shift, and go to state 29
    '-'         shift, and go to state 30
    '!'         shift, and go to state 31

    primary_expression         go to state 32
    postfix_expression         go to state 33
    unary_operator             go to state 34
    unary_expression           go to state 104
    multiplicative_expression  go to state 36
    additive_expression        go to state 37
    relational_expression      go to state 38
    equality_expression        go to state 39
    logical_AND_expression     go to state 114


State 73

   42 conditional_expression: logical_OR_expression '?' • expression ':' conditional_expression

    IDENTIFIER  shift, and go to state 22
    STRING_LIT  shift, and go to state 23
    C_CONSTANT  shift, and go to state 24
    I_CONSTANT  shift, and go to state 25
    '('         shift, and go to state 26
    '&'         shift, and go to state 27
    '*'         shift, and go to state 28
    '+'         shift, and go to state 29
    '-'         shift, and go to state 30
    '!'         shift, and go to state 31

    primary_expression         go to state 32
    postfix_expression         go to state 33
    unary_operator             go to state 34
    unary_expression           go to state 35
    multiplicative_expression  go to state 36
    additive_expression        go to state 37
    relational_expression      go to state 38
    equality_expression        go to state 39
    logical_AND_expression     go to state 40
    logical_OR_expression      go to state 41
    conditional_expression     go to state 42
    assignment_expression      go to state 51
    expression                 go to state 115


State 74

   84 iteration_statement: FOR • '(' expressionopt ';' expressionopt ';' expressionopt ')' statement

    '('  shift, and go to state 116


State 75

   80 selection_statement: IF • '(' expression ')' statement
   81                    | IF • '(' expression ')' statement ELSE statement

    '('  shift, and go to state 117


State 76

   85 jump_statement: RETURN • expressionopt ';'

    IDENTIFIER  shift, and go to state 22
    STRING_LIT  shift, and go to state 23
    C_CONSTANT  shift, and go to state 24
    I_CONSTANT  shift, and go to state 25
    '('         shift, and go to state 26
    '&'         shift, and go to state 27
    '*'         shift, and go to state 28
    '+'         shift, and go to state 29
    '-'         shift, and go to state 30
    '!'         shift, and go to state 31

    $default  reduce using rule 82 (expressionopt)

    primary_expression         go to state 32
    postfix_expression         go to state 33
    unary_operator             go to state 34
    unary_expression           go to state 35
    multiplicative_expression  go to state 36
    additive_expression        go to state 37
    relational_expression      go to state 38
    equality_expression        go to state 39
    logical_AND_expression     go to state 40
    logical_OR_expression      go to state 41
    conditional_expression     go to state 42
    assignment_expression      go to state 51
    expression                 go to state 77
    expressionopt              go to state 118


State 77

   83 expressionopt: expression •

    $default  reduce using rule 83 (expressionopt)


State 78

   77 block_item: declaration •

    $default  reduce using rule 77 (block_item)


State 79

   78 block_item: statement •

    $default  reduce using rule 78 (block_item)


State 80

   67 statement: compound_statement •

    $default  reduce using rule 67 (statement)


State 81

   72 compound_statement: '{' block_item_list_opt • '}'

    '}'  shift, and go to state 119


State 82

   74 block_item_list_opt: block_item_list •
   76 block_item_list: block_item_list • block_item

    CHAR        shift, and go to state 1
    FOR         shift, and go to state 74
    IF          shift, and go to state 75
    INT         shift, and go to state 2
    RETURN      shift, and go to state 76
    VOID        shift, and go to state 3
    IDENTIFIER  shift, and go to state 22
    STRING_LIT  shift, and go to state 23
    C_CONSTANT  shift, and go to state 24
    I_CONSTANT  shift, and go to state 25
    '('         shift, and go to state 26
    '&'         shift, and go to state 27
    '*'         shift, and go to state 28
    '+'         shift, and go to state 29
    '-'         shift, and go to state 30
    '!'         shift, and go to state 31
    '{'         shift, and go to state 47

    ';'       reduce using rule 82 (expressionopt)
    $default  reduce using rule 74 (block_item_list_opt)

    primary_expression         go to state 32
    postfix_expression         go to state 33
    unary_operator             go to state 34
    unary_expression           go to state 35
    multiplicative_expression  go to state 36
    additive_expression        go to state 37
    relational_expression      go to state 38
    equality_expression        go to state 39
    logical_AND_expression     go to state 40
    logical_OR_expression      go to state 41
    conditional_expression     go to state 42
    assignment_expression      go to state 51
    expression                 go to state 77
    declaration                go to state 78
    type_specifier             go to state 17
    statement                  go to state 79
    compound_statement         go to state 80
    block_item                 go to state 120
    expression_statement       go to state 84
    selection_statement        go to state 85
    expressionopt              go to state 86
    iteration_statement        go to state 87
    jump_statement             go to state 88


State 83

   75 block_item_list: block_item •

    $default  reduce using rule 75 (block_item_list)


State 84

   68 statement: expression_statement •

    $default  reduce using rule 68 (statement)


State 85

   69 statement: selection_statement •

    $default  reduce using rule 69 (statement)


State 86

   79 expression_statement: expressionopt • ';'

    ';'  shift, and go to state 121


State 87

   70 statement: iteration_statement •

    $default  reduce using rule 70 (statement)


State 88

   71 statement: jump_statement •

    $default  reduce using rule 71 (statement)


State 89

   63 parameter_declaration: type_specifier • pointer_opt identifier_opt

    '*'  shift, and go to state 8

    $default  reduce using rule 57 (pointer_opt)

    pointer      go to state 11
    pointer_opt  go to state 122


State 90

   60 parameter_list: parameter_list • ',' parameter_declaration
   62 parameter_list_opt: parameter_list •

    ','  shift, and go to state 123

    $default  reduce using rule 62 (parameter_list_opt)


State 91

   55 direct_declarator: IDENTIFIER '(' parameter_list_opt • ')'

    ')'  shift, and go to state 124


State 92

   59 parameter_list: parameter_declaration •

    $default  reduce using rule 59 (parameter_list)


State 93

   54 direct_declarator: IDENTIFIER '[' I_CONSTANT • ']'

    ']'  shift, and go to state 125


State 94

    5 primary_expression: '(' expression ')' •

    $default  reduce using rule 5 (primary_expression)


State 95

    9 postfix_expression: postfix_expression PTR_OP IDENTIFIER •

    $default  reduce using rule 9 (postfix_expression)


State 96

    8 postfix_expression: postfix_expression '(' argument_expression_list_opt • ')'

    ')'  shift, and go to state 126


State 97

   11 argument_expression_list_opt: argument_expression_list •
   13 argument_expression_list: argument_expression_list • ',' assignment_expression

    ','  shift, and go to state 127

    $default  reduce using rule 11 (argument_expression_list_opt)


State 98

   12 argument_expression_list: assignment_expression •

    $default  reduce using rule 12 (argument_expression_list)


State 99

    7 postfix_expression: postfix_expression '[' expression • ']'

    ']'  shift, and go to state 128


State 100

   44 assignment_expression: unary_expression '=' assignment_expression •

    $default  reduce using rule 44 (assignment_expression)


State 101

   24 multiplicative_expression: multiplicative_expression '*' unary_expression •

    $default  reduce using rule 24 (multiplicative_expression)


State 102

   25 multiplicative_expression: multiplicative_expression '/' unary_expression •

    $default  reduce using rule 25 (multiplicative_expression)


State 103

   26 multiplicative_expression: multiplicative_expression '%' unary_expression •

    $default  reduce using rule 26 (multiplicative_expression)


State 104

   23 multiplicative_expression: unary_expression •

    $default  reduce using rule 23 (multiplicative_expression)


State 105

   28 additive_expression: additive_expression • '+' multiplicative_expression
   29                    | additive_expression • '-' multiplicative_expression
   32 relational_expression: additive_expression LE_OP additive_expression •

    '+'  shift, and go to state 65
    '-'  shift, and go to state 66

    $default  reduce using rule 32 (relational_expression)


State 106

   28 additive_expression: additive_expression • '+' multiplicative_expression
   29                    | additive_expression • '-' multiplicative_expression
   33 relational_expression: additive_expression GE_OP additive_expression •

    '+'  shift, and go to state 65
    '-'  shift, and go to state 66

    $default  reduce using rule 33 (relational_expression)


State 107

   24 multiplicative_expression: multiplicative_expression • '*' unary_expression
   25                          | multiplicative_expression • '/' unary_expression
   26                          | multiplicative_expression • '%' unary_expression
   28 additive_expression: additive_expression '+' multiplicative_expression •

    '*'  shift, and go to state 60
    '/'  shift, and go to state 61
    '%'  shift, and go to state 62

    $default  reduce using rule 28 (additive_expression)


State 108

   24 multiplicative_expression: multiplicative_expression • '*' unary_expression
   25                          | multiplicative_expression • '/' unary_expression
   26                          | multiplicative_expression • '%' unary_expression
   29 additive_expression: additive_expression '-' multiplicative_expression •

    '*'  shift, and go to state 60
    '/'  shift, and go to state 61
    '%'  shift, and go to state 62

    $default  reduce using rule 29 (additive_expression)


State 109

   28 additive_expression: additive_expression • '+' multiplicative_expression
   29                    | additive_expression • '-' multiplicative_expression
   30 relational_expression: additive_expression '<' additive_expression •

    '+'  shift, and go to state 65
    '-'  shift, and go to state 66

    $default  reduce using rule 30 (relational_expression)


State 110

   28 additive_expression: additive_expression • '+' multiplicative_expression
   29                    | additive_expression • '-' multiplicative_expression
   31 relational_expression: additive_expression '>' additive_expression •

    '+'  shift, and go to state 65
    '-'  shift, and go to state 66

    $default  reduce using rule 31 (relational_expression)


State 111

   35 equality_expression: equality_expression EQ_OP relational_expression •

    $default  reduce using rule 35 (equality_expression)


State 112

   36 equality_expression: equality_expression NE_OP relational_expression •

    $default  reduce using rule 36 (equality_expression)


State 113

   35 equality_expression: equality_expression • EQ_OP relational_expression
   36                    | equality_expression • NE_OP relational_expression
   38 logical_AND_expression: logical_AND_expression AND_OP equality_expression •

    EQ_OP  shift, and go to state 69
    NE_OP  shift, and go to state 70

    $default  reduce using rule 38 (logical_AND_expression)


State 114

   38 logical_AND_expression: logical_AND_expression • AND_OP equality_expression
   40 logical_OR_expression: logical_OR_expression OR_OP logical_AND_expression •

    AND_OP  shift, and go to state 71

    $default  reduce using rule 40 (logical_OR_expression)


State 115

   42 conditional_expression: logical_OR_expression '?' expression • ':' conditional_expression

    ':'  shift, and go to state 129


State 116

   84 iteration_statement: FOR '(' • expressionopt ';' expressionopt ';' expressionopt ')' statement

    IDENTIFIER  shift, and go to state 22
    STRING_LIT  shift, and go to state 23
    C_CONSTANT  shift, and go to state 24
    I_CONSTANT  shift, and go to state 25
    '('         shift, and go to state 26
    '&'         shift, and go to state 27
    '*'         shift, and go to state 28
    '+'         shift, and go to state 29
    '-'         shift, and go to state 30
    '!'         shift, and go to state 31

    $default  reduce using rule 82 (expressionopt)

    primary_expression         go to state 32
    postfix_expression         go to state 33
    unary_operator             go to state 34
    unary_expression           go to state 35
    multiplicative_expression  go to state 36
    additive_expression        go to state 37
    relational_expression      go to state 38
    equality_expression        go to state 39
    logical_AND_expression     go to state 40
    logical_OR_expression      go to state 41
    conditional_expression     go to state 42
    assignment_expression      go to state 51
    expression                 go to state 77
    expressionopt              go to state 130


State 117

   80 selection_statement: IF '(' • expression ')' statement
   81                    | IF '(' • expression ')' statement ELSE statement

    IDENTIFIER  shift, and go to state 22
    STRING_LIT  shift, and go to state 23
    C_CONSTANT  shift, and go to state 24
    I_CONSTANT  shift, and go to state 25
    '('         shift, and go to state 26
    '&'         shift, and go to state 27
    '*'         shift, and go to state 28
    '+'         shift, and go to state 29
    '-'         shift, and go to state 30
    '!'         shift, and go to state 31

    primary_expression         go to state 32
    postfix_expression         go to state 33
    unary_operator             go to state 34
    unary_expression           go to state 35
    multiplicative_expression  go to state 36
    additive_expression        go to state 37
    relational_expression      go to state 38
    equality_expression        go to state 39
    logical_AND_expression     go to state 40
    logical_OR_expression      go to state 41
    conditional_expression     go to state 42
    assignment_expression      go to state 51
    expression                 go to state 131


State 118

   85 jump_statement: RETURN expressionopt • ';'

    ';'  shift, and go to state 132


State 119

   72 compound_statement: '{' block_item_list_opt '}' •

    $default  reduce using rule 72 (compound_statement)


State 120

   76 block_item_list: block_item_list block_item •

    $default  reduce using rule 76 (block_item_list)


State 121

   79 expression_statement: expressionopt ';' •

    $default  reduce using rule 79 (expression_statement)


State 122

   63 parameter_declaration: type_specifier pointer_opt • identifier_opt

    IDENTIFIER  shift, and go to state 133

    $default  reduce using rule 64 (identifier_opt)

    identifier_opt  go to state 134


State 123

   60 parameter_list: parameter_list ',' • parameter_declaration

    CHAR  shift, and go to state 1
    INT   shift, and go to state 2
    VOID  shift, and go to state 3

    type_specifier         go to state 89
    parameter_declaration  go to state 135


State 124

   55 direct_declarator: IDENTIFIER '(' parameter_list_opt ')' •

    $default  reduce using rule 55 (direct_declarator)


State 125

   54 direct_declarator: IDENTIFIER '[' I_CONSTANT ']' •

    $default  reduce using rule 54 (direct_declarator)


State 126

    8 postfix_expression: postfix_expression '(' argument_expression_list_opt ')' •

    $default  reduce using rule 8 (postfix_expression)


State 127

   13 argument_expression_list: argument_expression_list ',' • assignment_expression

    IDENTIFIER  shift, and go to state 22
    STRING_LIT  shift, and go to state 23
    C_CONSTANT  shift, and go to state 24
    I_CONSTANT  shift, and go to state 25
    '('         shift, and go to state 26
    '&'         shift, and go to state 27
    '*'         shift, and go to state 28
    '+'         shift, and go to state 29
    '-'         shift, and go to state 30
    '!'         shift, and go to state 31

    primary_expression         go to state 32
    postfix_expression         go to state 33
    unary_operator             go to state 34
    unary_expression           go to state 35
    multiplicative_expression  go to state 36
    additive_expression        go to state 37
    relational_expression      go to state 38
    equality_expression        go to state 39
    logical_AND_expression     go to state 40
    logical_OR_expression      go to state 41
    conditional_expression     go to state 42
    assignment_expression      go to state 136


State 128

    7 postfix_expression: postfix_expression '[' expression ']' •

    $default  reduce using rule 7 (postfix_expression)


State 129

   42 conditional_expression: logical_OR_expression '?' expression ':' • conditional_expression

    IDENTIFIER  shift, and go to state 22
    STRING_LIT  shift, and go to state 23
    C_CONSTANT  shift, and go to state 24
    I_CONSTANT  shift, and go to state 25
    '('         shift, and go to state 26
    '&'         shift, and go to state 27
    '*'         shift, and go to state 28
    '+'         shift, and go to state 29
    '-'         shift, and go to state 30
    '!'         shift, and go to state 31

    primary_expression         go to state 32
    postfix_expression         go to state 33
    unary_operator             go to state 34
    unary_expression           go to state 104
    multiplicative_expression  go to state 36
    additive_expression        go to state 37
    relational_expression      go to state 38
    equality_expression        go to state 39
    logical_AND_expression     go to state 40
    logical_OR_expression      go to state 41
    conditional_expression     go to state 137


State 130

   84 iteration_statement: FOR '(' expressionopt • ';' expressionopt ';' expressionopt ')' statement

    ';'  shift, and go to state 138


State 131

   80 selection_statement: IF '(' expression • ')' statement
   81                    | IF '(' expression • ')' statement ELSE statement

    ')'  shift, and go to state 139


State 132

   85 jump_statement: RETURN expressionopt ';' •

    $default  reduce using rule 85 (jump_statement)


State 133

   65 identifier_opt: IDENTIFIER •

    $default  reduce using rule 65 (identifier_opt)


State 134

   63 parameter_declaration: type_specifier pointer_opt identifier_opt •

    $default  reduce using rule 63 (parameter_declaration)


State 135

   60 parameter_list: parameter_list ',' parameter_declaration •

    $default  reduce using rule 60 (parameter_list)


State 136

   13 argument_expression_list: argument_expression_list ',' assignment_expression •

    $default  reduce using rule 13 (argument_expression_list)


State 137

   42 conditional_expression: logical_OR_expression '?' expression ':' conditional_expression •

    $default  reduce using rule 42 (conditional_expression)


State 138

   84 iteration_statement: FOR '(' expressionopt ';' • expressionopt ';' expressionopt ')' statement

    IDENTIFIER  shift, and go to state 22
    STRING_LIT  shift, and go to state 23
    C_CONSTANT  shift, and go to state 24
    I_CONSTANT  shift, and go to state 25
    '('         shift, and go to state 26
    '&'         shift, and go to state 27
    '*'         shift, and go to state 28
    '+'         shift, and go to state 29
    '-'         shift, and go to state 30
    '!'         shift, and go to state 31

    $default  reduce using rule 82 (expressionopt)

    primary_expression         go to state 32
    postfix_expression         go to state 33
    unary_operator             go to state 34
    unary_expression           go to state 35
    multiplicative_expression  go to state 36
    additive_expression        go to state 37
    relational_expression      go to state 38
    equality_expression        go to state 39
    logical_AND_expression     go to state 40
    logical_OR_expression      go to state 41
    conditional_expression     go to state 42
    assignment_expression      go to state 51
    expression                 go to state 77
    expressionopt              go to state 140


State 139

   80 selection_statement: IF '(' expression ')' • statement
   81                    | IF '(' expression ')' • statement ELSE statement

    FOR         shift, and go to state 74
    IF          shift, and go to state 75
    RETURN      shift, and go to state 76
    IDENTIFIER  shift, and go to state 22
    STRING_LIT  shift, and go to state 23
    C_CONSTANT  shift, and go to state 24
    I_CONSTANT  shift, and go to state 25
    '('         shift, and go to state 26
    '&'         shift, and go to state 27
    '*'         shift, and go to state 28
    '+'         shift, and go to state 29
    '-'         shift, and go to state 30
    '!'         shift, and go to state 31
    '{'         shift, and go to state 47

    $default  reduce using rule 82 (expressionopt)

    primary_expression         go to state 32
    postfix_expression         go to state 33
    unary_operator             go to state 34
    unary_expression           go to state 35
    multiplicative_expression  go to state 36
    additive_expression        go to state 37
    relational_expression      go to state 38
    equality_expression        go to state 39
    logical_AND_expression     go to state 40
    logical_OR_expression      go to state 41
    conditional_expression     go to state 42
    assignment_expression      go to state 51
    expression                 go to state 77
    statement                  go to state 141
    compound_statement         go to state 80
    expression_statement       go to state 84
    selection_statement        go to state 85
    expressionopt              go to state 86
    iteration_statement        go to state 87
    jump_statement             go to state 88


State 140

   84 iteration_statement: FOR '(' expressionopt ';' expressionopt • ';' expressionopt ')' statement

    ';'  shift, and go to state 142


State 141

   80 selection_statement: IF '(' expression ')' statement •
   81                    | IF '(' expression ')' statement • ELSE statement

    ELSE  shift, and go to state 143

    ELSE      [reduce using rule 80 (selection_statement)]
    $default  reduce using rule 80 (selection_statement)


State 142

   84 iteration_statement: FOR '(' expressionopt ';' expressionopt ';' • expressionopt ')' statement

    IDENTIFIER  shift, and go to state 22
    STRING_LIT  shift, and go to state 23
    C_CONSTANT  shift, and go to state 24
    I_CONSTANT  shift, and go to state 25
    '('         shift, and go to state 26
    '&'         shift, and go to state 27
    '*'         shift, and go to state 28
    '+'         shift, and go to state 29
    '-'         shift, and go to state 30
    '!'         shift, and go to state 31

    $default  reduce using rule 82 (expressionopt)

    primary_expression         go to state 32
    postfix_expression         go to state 33
    unary_operator             go to state 34
    unary_expression           go to state 35
    multiplicative_expression  go to state 36
    additive_expression        go to state 37
    relational_expression      go to state 38
    equality_expression        go to state 39
    logical_AND_expression     go to state 40
    logical_OR_expression      go to state 41
    conditional_expression     go to state 42
    assignment_expression      go to state 51
    expression                 go to state 77
    expressionopt              go to state 144


State 143

   81 selection_statement: IF '(' expression ')' statement ELSE • statement

    FOR         shift, and go to state 74
    IF          shift, and go to state 75
    RETURN      shift, and go to state 76
    IDENTIFIER  shift, and go to state 22
    STRING_LIT  shift, and go to state 23
    C_CONSTANT  shift, and go to state 24
    I_CONSTANT  shift, and go to state 25
    '('         shift, and go to state 26
    '&'         shift, and go to state 27
    '*'         shift, and go to state 28
    '+'         shift, and go to state 29
    '-'         shift, and go to state 30
    '!'         shift, and go to state 31
    '{'         shift, and go to state 47

    $default  reduce using rule 82 (expressionopt)

    primary_expression         go to state 32
    postfix_expression         go to state 33
    unary_operator             go to state 34
    unary_expression           go to state 35
    multiplicative_expression  go to state 36
    additive_expression        go to state 37
    relational_expression      go to state 38
    equality_expression        go to state 39
    logical_AND_expression     go to state 40
    logical_OR_expression      go to state 41
    conditional_expression     go to state 42
    assignment_expression      go to state 51
    expression                 go to state 77
    statement                  go to state 145
    compound_statement         go to state 80
    expression_statement       go to state 84
    selection_statement        go to state 85
    expressionopt              go to state 86
    iteration_statement        go to state 87
    jump_statement             go to state 88


State 144

   84 iteration_statement: FOR '(' expressionopt ';' expressionopt ';' expressionopt • ')' statement

    ')'  shift, and go to state 146


State 145

   81 selection_statement: IF '(' expression ')' statement ELSE statement •

    $default  reduce using rule 81 (selection_statement)


State 146

   84 iteration_statement: FOR '(' expressionopt ';' expressionopt ';' expressionopt ')' • statement

    FOR         shift, and go to state 74
    IF          shift, and go to state 75
    RETURN      shift, and go to state 76
    IDENTIFIER  shift, and go to state 22
    STRING_LIT  shift, and go to state 23
    C_CONSTANT  shift, and go to state 24
    I_CONSTANT  shift, and go to state 25
    '('         shift, and go to state 26
    '&'         shift, and go to state 27
    '*'         shift, and go to state 28
    '+'         shift, and go to state 29
    '-'         shift, and go to state 30
    '!'         shift, and go to state 31
    '{'         shift, and go to state 47

    $default  reduce using rule 82 (expressionopt)

    primary_expression         go to state 32
    postfix_expression         go to state 33
    unary_operator             go to state 34
    unary_expression           go to state 35
    multiplicative_expression  go to state 36
    additive_expression        go to state 37
    relational_expression      go to state 38
    equality_expression        go to state 39
    logical_AND_expression     go to state 40
    logical_OR_expression      go to state 41
    conditional_expression     go to state 42
    assignment_expression      go to state 51
    expression                 go to state 77
    statement                  go to state 147
    compound_statement         go to state 80
    expression_statement       go to state 84
    selection_statement        go to state 85
    expressionopt              go to state 86
    iteration_statement        go to state 87
    jump_statement             go to state 88


State 147

   84 iteration_statement: FOR '(' expressionopt ';' expressionopt ';' expressionopt ')' statement •

    $default  reduce using rule 84 (iteration_statement)
